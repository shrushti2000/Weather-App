{"version":3,"sources":["logo.svg","components/display.components.jsx","components/header.components.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","console","log","weatherdata","location","country","region","temperature","description","wind_speed","pressure","humidity","precip","className","Header","onSubmit","e","changeWeather","text","onChange","handleChange","placeholder","App","state","coords","latitude","longitude","searchField","input","setState","preventDefault","url","fetch","then","response","json","data","weatherinfo","name","current","weather_descriptions","navigator","geolocation","getCurrentPosition","position","newCoords","target","value","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7f92140.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './display.styles.css';\r\nexport const Display=(props)=>{\r\n    console.log(props);\r\n    const {location,country,region,temperature,description,wind_speed,pressure,humidity,precip}=props.weatherdata;\r\n    \r\n       return(\r\n        <div>\r\n          <div className=\"major-info\">\r\n            <p className=\"temp\">{  temperature} Â°C , {description}</p>\r\n            <h1>{location}</h1>\r\n            <p className=\"country-region\">{region} , {country}</p>\r\n            \r\n          </div>\r\n\r\n\r\n           <div className=\"minor-info\">\r\n              \r\n              <h2>Wind Speed <br></br> {wind_speed}   </h2> \r\n              <h2>Pressure  <br></br> {pressure}   </h2> \r\n              <h2>Humidity  <br></br> {humidity}  </h2> \r\n              <h2>Precip <br></br> {precip}  </h2>           \r\n           </div>\r\n        </div>\r\n          \r\n       )\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    }\r\n","import React from 'react';\r\nimport './header.styles.css';\r\nexport const Header =(props)=>{\r\n    return(\r\n        <div className=\"header\">\r\n        <p className=\"heading\">Weather App</p>\r\n        <form onSubmit={(e)=>{props.changeWeather(e)}}>\r\n        <input className=\"input\" text=\"search\" onChange={props.handleChange} placeholder=\"Search place..\"></input>\r\n      \r\n        </form>\r\n          </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Display } from './components/display.components.jsx';\nimport {Header} from './components/header.components.jsx';\n\nclass App extends React.Component {\n  state = {\n    coords: {\n      latitude: 19,\n      longitude: 72\n    },\n    weatherdata: {},\n    searchField:''\n  }\n\n  componentDidMount() {\n    //get device location\n    if (navigator.geolocation) {\n      console.log(\"supported\");\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        }\n        this.setState({ coords: newCoords });\n        const url = `http://api.weatherstack.com/current?access_key=919f4781318438f28a95f2d32a6df769&query=${this.state.coords.latitude},${this.state.coords.longitude}`;\n        fetch(url)\n          .then(response => response.json())\n          .then(data => {\n            let weatherinfo = {\n              location: data.location.name,\n              country: data.location.country,\n              region: data.location.region,\n              temperature: data.current.temperature,\n              description: data.current.weather_descriptions[0],\n              wind_speed: data.current.wind_speed,\n              pressure: data.current.pressure,\n              humidity: data.current.humidity,\n              precip: data.current.precip,\n\n            }\n            this.setState({ weatherdata: weatherinfo });\n          }\n\n          )\n      }\n\n      )\n    }\n    else {\n      console.log(\"not supported\");\n    }\n  }\n   handleChange=(input)=>{\n    this.setState({searchField:input});\n   \n\n  }\n\n  changeWeather=(e)=>{\n    e.preventDefault();\n    const url = `http://api.weatherstack.com/current?access_key=919f4781318438f28a95f2d32a6df769&query=${this.state.searchField}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        let weatherinfo = {\n          location: data.location.name,\n          country: data.location.country,\n          region: data.location.region,\n          temperature: data.current.temperature,\n          description: data.current.weather_descriptions[0],\n          wind_speed: data.current.wind_speed,\n          pressure: data.current.pressure,\n          humidity: data.current.humidity,\n          precip: data.current.precip,\n\n        }\n        this.setState({ weatherdata: weatherinfo });\n      }\n\n      )\n  }\n\n\n  render() {\n    \n    \n    \n    return (\n      <div className=\"App\">\n          <Header handleChange={(e)=>this.handleChange(e.target.value)} changeWeather={this.changeWeather}/>\n          <Display weatherdata={this.state.weatherdata} />\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}